// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role_type {
  ADMINISTRATOR
  USER
}

enum genre {
  AUTOBIOGRAPHY
  BIOGRAPHY
  FANTASY
  FICTION
  HISTORICAL_FICTION
  HORROR
  MYSTERY
  POETRY
  ROMANCE
  SCIENCE_FICTION
  SELF_HELP
  THRILLER
}

enum payment_status {
  PENDING
  SUCCESS
  FAILED
}

// A user with role-based authorisation
model user {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String    @unique
  password  String
  coin      Int       @default(0)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  userRoles      user_role[]
  books          book[]
  bids           bid[]
  sentTrades     trade[]     @relation("sender")
  receivedTrades trade[]     @relation("receiver")
}

// A collection of permissions on a specific collection of resources
model role {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        role_type @unique @default(USER)
  description String?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)

  userRoles     user_role[]
  roleResources role_resource[]
}

// A part of the application to be secured
model resource {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique

  RoleResource role_resource[]
}

// Define UserRole model
model user_role {
  userId String @db.Uuid
  roleId String @db.Uuid

  // Define the relationship between User and Role
  user user @relation(fields: [userId], references: [id])
  role role @relation(fields: [roleId], references: [id])

  // Define the combined primary key
  @@id([userId, roleId])
}

// Define RoleResource model
model role_resource {
  roleId     String @db.Uuid
  resourceId String @db.Uuid

  // Define the relationship between Role and Resource
  role     role     @relation(fields: [roleId], references: [id])
  resource resource @relation(fields: [resourceId], references: [id])

  // Define the combined primary key
  @@id([roleId, resourceId])
}

model book {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId     String?  @db.Uuid
  title       String
  author      String
  genre       genre[]
  description String?
  photoUrl    String?
  quantity    Int?      @default(1)
  locked      Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(6)

  owner  user?   @relation(fields: [ownerId], references: [id])
  bids   bid[]
  trades trade[]
}

model bid {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bidderId   String   @db.Uuid
  bookId     String   @db.Uuid
  amount     Float    @default(0)
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(6)

  bidder user @relation(fields: [bidderId], references: [id])
  book   book @relation(fields: [bookId], references: [id])
}

model trade {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookId     String   @db.Uuid
  senderId   String   @db.Uuid
  receiverId String   @db.Uuid
  createdAt  DateTime @default(now()) @db.Timestamp(6)

  book     book     @relation(fields: [bookId], references: [id])
  sender   user     @relation("sender", fields: [senderId], references: [id])
  receiver user     @relation("receiver", fields: [receiverId], references: [id])
  payment  payment?
}

model payment {
  id      String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tradeId String         @unique @db.Uuid
  amount  Float
  status  payment_status @default(PENDING)

  trade trade @relation(fields: [tradeId], references: [id])
}
